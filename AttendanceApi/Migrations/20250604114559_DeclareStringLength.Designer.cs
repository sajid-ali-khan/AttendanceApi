// <auto-generated />
using System;
using AttendanceApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AttendanceApi.Migrations
{
    [DbContext(typeof(StructuredCollegeDbContext))]
    [Migration("20250604114559_DeclareStringLength")]
    partial class DeclareStringLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AttendanceApi.Models.AttendanceRecord", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("SessionId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("AttendanceRecords");
                });

            modelBuilder.Entity("AttendanceApi.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Computer Science & Engineering",
                            ShortName = "CSE"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Civil Engineering",
                            ShortName = "CIV"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Computer Science & Technology",
                            ShortName = "CST"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Electronics and Communication Engineering",
                            ShortName = "ECE"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Mechanical Engineering",
                            ShortName = "MEC"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Computer Science & Business Systems",
                            ShortName = "CSB"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "Electrical and Electronics Engineering",
                            ShortName = "EEE"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "Data Science",
                            ShortName = "CSD"
                        },
                        new
                        {
                            Id = 9,
                            FullName = "Artificial Intelligence & Machine Learning",
                            ShortName = "CSM"
                        });
                });

            modelBuilder.Entity("AttendanceApi.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StudentBatchId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("StudentBatchId", "SubjectId")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AttendanceApi.Models.CourseAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedRole")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FacultyId");

                    b.ToTable("CourseAssignments");
                });

            modelBuilder.Entity("AttendanceApi.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("AttendanceApi.Models.OfferedProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<int>("SchemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("SchemeId");

                    b.ToTable("OfferedPrograms");
                });

            modelBuilder.Entity("AttendanceApi.Models.Scheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Schemes");
                });

            modelBuilder.Entity("AttendanceApi.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<int>("NumAbsent")
                        .HasColumnType("int");

                    b.Property<int>("NumPresent")
                        .HasColumnType("int");

                    b.Property<string>("TimeStamp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("AttendanceApi.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Roll")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("StudentBatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentBatchId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("AttendanceApi.Models.StudentBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OfferedProgramId")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferedProgramId");

                    b.ToTable("StudentBatches");
                });

            modelBuilder.Entity("AttendanceApi.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SubjectType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AttendanceApi.Models.AttendanceRecord", b =>
                {
                    b.HasOne("AttendanceApi.Models.Session", "Session")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendanceApi.Models.Student", "Student")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AttendanceApi.Models.Course", b =>
                {
                    b.HasOne("AttendanceApi.Models.StudentBatch", "StudentBatch")
                        .WithMany("Courses")
                        .HasForeignKey("StudentBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendanceApi.Models.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentBatch");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("AttendanceApi.Models.CourseAssignment", b =>
                {
                    b.HasOne("AttendanceApi.Models.Course", "Course")
                        .WithMany("CourseAssignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendanceApi.Models.Faculty", "Faculty")
                        .WithMany("CourseAssignments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("AttendanceApi.Models.OfferedProgram", b =>
                {
                    b.HasOne("AttendanceApi.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendanceApi.Models.Scheme", "Scheme")
                        .WithMany("OfferedPrograms")
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("AttendanceApi.Models.Session", b =>
                {
                    b.HasOne("AttendanceApi.Models.Course", "Course")
                        .WithMany("Sessions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendanceApi.Models.Faculty", "Faculty")
                        .WithMany("Sessions")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("AttendanceApi.Models.Student", b =>
                {
                    b.HasOne("AttendanceApi.Models.StudentBatch", "StudentBatch")
                        .WithMany("Students")
                        .HasForeignKey("StudentBatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentBatch");
                });

            modelBuilder.Entity("AttendanceApi.Models.StudentBatch", b =>
                {
                    b.HasOne("AttendanceApi.Models.OfferedProgram", "OfferedProgram")
                        .WithMany("StudentBatches")
                        .HasForeignKey("OfferedProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfferedProgram");
                });

            modelBuilder.Entity("AttendanceApi.Models.Course", b =>
                {
                    b.Navigation("CourseAssignments");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("AttendanceApi.Models.Faculty", b =>
                {
                    b.Navigation("CourseAssignments");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("AttendanceApi.Models.OfferedProgram", b =>
                {
                    b.Navigation("StudentBatches");
                });

            modelBuilder.Entity("AttendanceApi.Models.Scheme", b =>
                {
                    b.Navigation("OfferedPrograms");
                });

            modelBuilder.Entity("AttendanceApi.Models.Session", b =>
                {
                    b.Navigation("AttendanceRecords");
                });

            modelBuilder.Entity("AttendanceApi.Models.Student", b =>
                {
                    b.Navigation("AttendanceRecords");
                });

            modelBuilder.Entity("AttendanceApi.Models.StudentBatch", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("AttendanceApi.Models.Subject", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
